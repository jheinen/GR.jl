using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libGR"], :libGR),
    LibraryProduct(prefix, ["libGR3"], :libGR3),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaPackaging/Yggdrasil/releases/download/GR-v0.39.0-0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    MacOS(:x86_64) => ("$bin_prefix/GR.v0.39.0.x86_64-apple-darwin14.tar.gz", "d33b0d8de2bb1f6cf245c72190358bef3e2f1792ceb8742ad5ac3209a3a0e247"),
    Linux(:i686) => ("$bin_prefix/GR.v0.39.0.i686-linux-gnu.tar.gz", "b41a4dfdce8e375ecd07b244f3447833d6cdb523191df220419f1a808b8e4dd5"),
    Linux(:x86_64) => ("$bin_prefix/GR.v0.39.0.x86_64-linux-gnu.tar.gz", "153aea9e2400801cf2de6dcd14d9a0409cbf34b74432e8f624316e05b478a353"),
    Windows(:x86_64) => ("$bin_prefix/GR.v0.39.0.x86_64-w64-mingw32.tar.gz", "da90051dd3a79ae3282ee9a0aa3ecd61763b5ab4f7a96a43ebcfef0f94eec250"),
    Windows(:i686) => ("$bin_prefix/GR.v0.39.0.i686-w64-mingw32.tar.gz", "5e0c919d43e95c29725e277a68d4a3b212fc20fa82ebc089819714c68ae9136b"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
